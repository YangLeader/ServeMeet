<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC
"-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- Namespace 는 실제 마이바티스를 통해
    SQL에 접근할 때 사용하는 매퍼 파일의 별칭이다. 
    보통 서비스의 이름과 같게 설정하여
    연결의 착오를 줄인다. -->
<mapper namespace="member">

	<select id="loginMember" parameterType="string"
		resultType = "Member">
	SELECT * FROM MEMBER 
	WHERE USERID = #{userId}
	</select>
	
	<insert id="insertMember" parameterType="Member">
		INSERT INTO MEMBER VALUES(
			SEQ_MEMBER.NEXTVAL,#{userId}, #{userPwd}, #{userName},#{email},0
		)
	</insert>
	
	<update id="updateMember" parameterType="Member">
		UPDATE MEMBER 
		<set>
			<if test="#{userPwd} == null">userPwd = userPwd</if>
		</set>
		set email = #{email}
		WHERE USERNO = #{userNo}
	</update>
	
	<update id="updatePoint" parameterType="hashmap">
		UPDATE MEMBER
		SET POINT = POINT+#{increasePoint}
		WHERE USERNO = #{userNo}
	</update>
	
	<delete id="deleteMember" parameterType="string">
		DELETE FROM MEMBER WHERE USERID = #{userId}
	</delete>
	
	<select id="checkIdDuplicate" statementType="CALLABLE" 
	       parameterType="hashmap">
		<!-- CallableStatement 는 { } 로 묶여 실행되며
		    시작괄호 '{' 다음에 tab 기호를 읽지 못한다. -->
		{ CALL ID_DUP_CHK(
			#{userId, mode=IN, jdbcType=VARCHAR},
			#{result, mode=OUT, jdbcType=NUMERIC,
			  javaType=integer}
			)
		}
	</select>
	
	<select id="checkNameDuplicate" statementType="CALLABLE" 
	       parameterType="hashmap">
		<!-- CallableStatement 는 { } 로 묶여 실행되며
		    시작괄호 '{' 다음에 tab 기호를 읽지 못한다. -->
		{ CALL NAME_DUP_CHK(
			#{userName, mode=IN, jdbcType=VARCHAR},
			#{result, mode=OUT, jdbcType=NUMERIC,
			  javaType=integer}
			)
		}
	</select>
	
	<select id="searchIdConfirm" parameterType="hashmap" resultType="string">
		select userId from member
		where userName = #{userName} and email = #{email}
	</select>
	
	<select id="getPoint" parameterType="_int" resultType="_int">
		select point from member
		where userNo = #{userNo}
	</select>
	

	<select id ="memberSearch" parameterType="Map" resultType="String">
		select USERNAME from MEMBER where USERNAME like '%' || #{keyword} || '%' and username !=#{myName}
	</select>

	<select id="searchPwdCheck" parameterType="hashmap" resultType="_int">
		select count(*) from member
		where userId = #{userId} and email = #{email}
	</select>
	
	<select id="resetPwd" parameterType="hashmap" resultType="_int">
		update member set userPwd = #{userPwd} where userId = #{userId}
	</select>
<!--

// 아이디 체크 프로시저
CREATE OR REPLACE PROCEDURE ID_DUP_CHK
( V_ID IN MEMBER.USERID%TYPE,
  PR_RESULT OUT NUMBER)
  IS
  BEGIN
     SELECT COUNT(*) INTO PR_RESULT
     FROM MEMBER
     WHERE USERID = V_ID;
  END;
  /
  
// 컴파일 결과 확인

SET SERVEROUTPUT ON;

DECLARE
     RESULT NUMBER;
BEGIN
     ID_DUP_CHK('admina', RESULT);
     DBMS_OUTPUT.PUT_LINE('RESULT :: ' || RESULT);
END;
/

// 닉네임 체크 프로시저
CREATE OR REPLACE PROCEDURE ID_DUP_CHK
( V_ID IN MEMBER.USERID%TYPE,
  PR_RESULT OUT NUMBER)
  IS
  BEGIN
     SELECT COUNT(*) INTO PR_RESULT
     FROM MEMBER
     WHERE USERID = V_ID;
  END;
  /
  
SET SERVEROUTPUT ON;

DECLARE
     RESULT NUMBER;
BEGIN
     ID_DUP_CHK('admina', RESULT);
     DBMS_OUTPUT.PUT_LINE('RESULT :: ' || RESULT);
END;
/
-->

</mapper>







