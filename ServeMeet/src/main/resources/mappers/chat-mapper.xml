<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC
"-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="chat">


	<sql id="chatList">
		select G.Chattingid,LD.Userno,
		       case when (select L.Chattingname from Chattinglist L where L.chattingid = G.Chattingid) is null then
		                                  (select NVL((select (select M.Username from Member M where M.Userno=g2.Userno) userName 
		                                           from Chatting_Group G2 
		                                           where g2.Chattingid=g.Chattingid and g2.Userno!=#{userNo} and G2.STATUS='Y'
		                                          ),'(알수없음)') chattingName 
		                                    from Chattinglist L where L.Chattingid= G.Chattingid
		                                    )
		                                    else
		                                    (select L.Chattingname from Chattinglist L where L.chattingid = G.Chattingid)
		                                    end
			              chattingName,
		         Chcontent,Chstatus,Chdate                       
		from Chatting_Group G left join 
		    (select Chattingid,Userno,Chcontent,Chstatus,Chdate
		    from (select Chattingid,Userno,Chcontent,Chstatus,Chdate,max(Chdate)over(Partition by Chattingid)mindate from Chattinglog)
		    where mindate=Chdate <!-- and Chcontent is not null -->
		     Order by mindate desc)LD
		on G.Chattingid=Ld.Chattingid
		where G.Userno=#{userNo} and G.STATUS='Y' and Chcontent is not null 
		
	</sql>

	<select id="isChat" parameterType="Map" resultType="Chatting">
		select chattingid,case when(select L.Chattingname from Chattinglist L where L.Chattingid= G1.Chattingid) is null then 
		                           (select g3.userName 
		                            from(select G2.Chattingid,(select M.Username from Member M where M.Userno=G2.Userno) userName
		                                from Chatting_Group g2 )g3
		                            where g3.userName!=#{myName} and G3.Chattingid=G1.Chattingid)
		                            else (select L.Chattingname from Chattinglist L where L.Chattingid= G1.Chattingid)
		                            end
		                        chattingName
		 from (select L.CHATTINGID 
		from (select CHATTINGID from CHATTINGLIST where chattingname is null) L join( select Username,chattingid from (select chattingid,(select M.Username 
		                                                                                                                from Member M where m.userno=Chatting_Group.Userno)username  
		                                                                            from CHATTING_GROUP  where CHATTING_GROUP.STATUS='Y') where username in (#{myName},#{userName}))G 
		                                                                        on g.chattingid=L.chattingID
		group by L.CHATTINGID
		having count(*)<![CDATA[>]]>1 and count(*)<![CDATA[<]]>3)g1
	</select>
	
	<select id="selectChattingList" parameterType="int" resultType="ChattingRoom">
		
		SELECT  T1.Chattingid,Userno,chattingName, Chcontent,Chdate,NVL(T2.nCOUNT,0)nCOUNT   FROM (
		<include refid="chatList"/>
		)T1 LEFT JOIN
		 (       
		SELECT CHATTINGid,COUNT(*) nCOUNT
		FROM (SELECT Logid,Readcount,(SELECT Lg.Chattingid 
		                            FROM Chattinglog lg WHERE Lg.Logid=R.Logid) CHATTINGid 
		    FROM Chatread R WHERE Readcount<![CDATA[>]]>0 AND (SELECT USERNO FROM MEMBER M WHERE M.USERNAME=R.USERNAME ) =#{userNo}) 
		GROUP BY CHATTINGid) T2 ON T1.Chattingid=T2.Chattingid
	</select>
	
	<select id="selectChatLogList" parameterType="map" resultType="ChattingLog">
		select * from (                
		    select  ROWNUM rnum,chattingId,userNo,chDate,chContent,username 
		    from (select chattingId,userNo,chDate,chContent,(select M.username from MEMBER M where M.USERNO=L.userNo) username 
		          from ChattingLog L where L.chattingId=#{chatNo} order by chdate desc)
		    where ROWNUM <![CDATA[<]]> ((#{page}*20)+21)+#{msgCount} order by chDate)
		where rnum <![CDATA[>]]>(#{page}*20)+#{msgCount}     
                
	</select>
	
	<select id="selectChatMembers" parameterType="Map" resultType="ChatUser">
		select Chattingid,(select M.Username from Member M where M.Userno=G.Userno)username 
		from Chatting_Group G where Chattingid=#{chatNo} and Userno!=#{userNo} and G.STATUS = 'Y'
	</select>
	
	<select id="getChatName" parameterType="Map" resultType="Chatting">
		select Chattingid,case when Chattingname is null then(
		                                    select (select M.Username from Member M where M.Userno=g.Userno) userName
		                                    from Chatting_Group G 
		                                    where G.Chattingid=L.Chattingid and G.Userno!=#{userNo}
		                                    )else
                                            Chattingname
                                            end
		                     chattingName
		from Chattinglist L where Chattingid=#{chatNo}
	</select>
	
	<select id="selectLastChatNo" parameterType="_int" resultType="Chatting">
		select * from (
			<include refid="chatList"/>
		)
		where rownum=1
	</select>
	<select id="selectChatMember" parameterType="_int" resultType="String">
		select (select M.Username from Member M  where M.Userno = G.Userno) userName from Chatting_Group G where Chattingid=#{chatId} and Status='Y'  order by  userName
	</select>


	<insert id="insertChatLog" parameterType="ChattingLog">
		insert all
		into ChattingLog
		values(seq_LOG.nextval,#{chattingId},#{userNo},default,#{chContent},(select L.Personcount from Chattinglist L where L.Chattingid=#{chattingId})-1)
		<foreach collection="list" item="item">
		into CHATREAD
		VALUES(seq_LOG.currval ,#{item},default,#{chattingId})
		</foreach>
		select *
		from dual
	
	</insert>
	<insert id="insertChat" parameterType="HashMap">
		insert all
		into
		CHATTINGLIST VALUES(seq_chat.nextval ,null,default)
		<foreach collection="userNameList" item="item">
		into CHATTING_GROUP
		VALUES(seq_chat.currval ,(select userno from MEMBER	where username=#{item}),default)
		</foreach>
		into
		CHATTINGLIST VALUES(seq_chat.nextval ,null,default)
		select *
		from dual
	</insert>
	<insert id="insertChatGroup" parameterType="ChatCreateInfo">
		<selectKey keyProperty="returnChatId" order="AFTER" resultType="_int">
			select seq_chat.currval from dual
		</selectKey>
		insert all
		into
		CHATTINGLIST VALUES(seq_chat.nextval ,#{chatName},default)
		<foreach collection="userName" item="item">
		into CHATTING_GROUP
		VALUES(seq_chat.currval ,(select userno from MEMBER	where username=#{item}),default)
		</foreach>
		select *
		from dual
	</insert>
	<update id="updateStatus" parameterType="ChatUser">
		update Chatread set Readcount=0 where Chattingid=#{chattingId} and Username=#{userName}
	</update>
	<update id="deletechatRoom" parameterType="map">
		update Chatting_Group set STATUS='N' where Chattingid=#{chatNo} and Userno =#{userNo}
	</update>
	
<!-- select * from (select L.CHATTINGID 
from (select CHATTINGID from CHATTINGLIST where chattingname is null) L join (select * from CHATTING_GROUP)G 
                                                                        on g.chattingid=L.chattingID
group by L.CHATTINGID
having count(*)>1 and count(*)<3)
; -->

</mapper>