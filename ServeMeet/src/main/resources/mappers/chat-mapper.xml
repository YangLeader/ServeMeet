<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC
"-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="chat">


	<sql id="chatList">
		select G.Chattingid,LD.Userno,
		       case when (select L.Chattingname from Chattinglist L where L.chattingid = G.Chattingid) is null then
		                                  (select (select (select M.Username from Member M where M.Userno=g2.Userno) userName 
		                                           from Chatting_Group G2 
		                                           where g2.Chattingid=L.Chattingid and g2.Userno!=#{userNo}
		                                          ) chattingName 
		                                    from Chattinglist L where L.Chattingid= G.Chattingid
		                                    )
		                                    else
		                                    (select L.Chattingname from Chattinglist L where L.chattingid = G.Chattingid)
		                                    end
			              chattingName,
		         Chcontent,Chstatus,Chdate                       
		from Chatting_Group G left join 
		    (select Chattingid,Userno,Chcontent,Chstatus,Chdate
		    from (select Chattingid,Userno,Chcontent,Chstatus,Chdate,max(Chdate)over(Partition by Chattingid)mindate from Chattinglog)
		    where mindate=Chdate
		     Order by mindate desc)LD
		on G.Chattingid=Ld.Chattingid
		where G.Userno=#{userNo}
		
	</sql>

	<select id="isChat" parameterType="Map" resultType="Chatting">
		select G1.Chattingid,case when(select L.Chattingname from Chattinglist L where L.Chattingid= G1.Chattingid) is null then 
		                           (select g3.userName 
		                            from(select G2.Chattingid,(select M.Username from Member M where M.Userno=G2.Userno) userName
		                                from Chatting_Group g2 )g3
		                            where g3.userName!=#{myName} and G3.Chattingid=G1.Chattingid)
		                            else (select L.Chattingname from Chattinglist L where L.Chattingid= G1.Chattingid)
		                            end
		                        chattingName
		from (select Chattingid
		        from (select G.Chattingid,(select M.Username from Member M where M.Userno=G.Userno )userName from Chatting_Group g) 
		        where userName in (#{myName},#{userName}) group by Chattingid 
		        having count(*) <![CDATA[>]]>1 and count(*) <![CDATA[<]]>3)G1
	</select>
	
	<select id="selectChattingList" parameterType="int" resultType="ChattingRoom">
		<include refid="chatList"/>
	</select>
	
	<select id="selectChatLogList" parameterType="_int" resultType="ChattingLog">
		select *from ChattingLog where chattingId=#{chatNo} order by chdate
	</select>
	
	<select id="selectChatMembers" parameterType="Map" resultType="ChatUser">
		select Chattingid,(select M.Username from Member M where M.Userno=G.Userno)username from Chatting_Group G where Chattingid=#{chatNo} and Userno!=#{userNo}
	</select>
	
	<select id="getChatName" parameterType="Map" resultType="Chatting">
		select Chattingid,case when Chattingname is null then(
		                                    select (select M.Username from Member M where M.Userno=g.Userno) userName
		                                    from Chatting_Group G 
		                                    where G.Chattingid=L.Chattingid and G.Userno!=#{userNo}
		                                    )else
                                            Chattingname
                                            end
		                     chattingName
		from Chattinglist L where Chattingid=#{chatNo}
	</select>
	
	<select id="selectLastChatNo" parameterType="_int" resultType="Chatting">
		select * from (
			<include refid="chatList"/>
		)
		where rownum=1
	</select>


	<insert id="insertChatLog" parameterType="ChattingLog">
		insert into ChattingLog
		values(#{chattingId},#{userNo},default,#{chContent},(select L.Personcount from Chattinglist L where L.Chattingid=#{chattingId})-1)
	</insert>
	<insert id="insertChat" parameterType="HashMap">
		insert all
		into
		CHATTINGLIST VALUES(seq_chat.nextval ,null,default)
		<foreach collection="userNameList" item="item">
		into CHATTING_GROUP
		VALUES(seq_chat.currval ,(select userno from MEMBER	where username=#{item}))
		</foreach>
		select *
		from dual
	</insert>
	<insert id="insertChatGroup" parameterType="ChatCreateInfo">
		<selectKey keyProperty="returnChatId" order="AFTER" resultType="_int">
			select seq_chat.currval from dual
		</selectKey>
		insert all
		into
		CHATTINGLIST VALUES(seq_chat.nextval ,#{chatName},default)
		<foreach collection="userName" item="item">
		into CHATTING_GROUP
		VALUES(seq_chat.currval ,(select userno from MEMBER	where username=#{item}))
		</foreach>
		select *
		from dual
	</insert>
	
	<delete id="deletechatRoom" parameterType="map">
		delete from Chatting_Group where Chattingid=#{chatNo} and Userno =#{userNo}
	</delete>

<!-- select * 
from (
    select G.Chattingid, G.Userno,L.Chattingname 
    from (select * from CHATTING_GROUP where userNo=46)G join CHATTINGLIST L on L.chattingId=g.chattingID
    ) GL join
(select Chattingid,Userno,Chcontent,Chstatus,Chdate
from (select Chattingid,Userno,Chcontent,Chstatus,Chdate,max(Chdate)over(Partition by Chattingid)mindate from Chattinglog)
where mindate=Chdate
)LD on LD.chattingID = GL.chattingID; -->

</mapper>